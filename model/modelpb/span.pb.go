// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/span.proto

package modelpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Span struct {
	ID           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Subtype      string        `protobuf:"bytes,3,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Action       string        `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	Sync         bool          `protobuf:"varint,5,opt,name=sync,proto3" json:"sync,omitempty"`
	Stacktrace   []*Stackframe `protobuf:"bytes,6,rep,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	Experimental *types.Value  `protobuf:"bytes,7,opt,name=experimental,proto3" json:"experimental,omitempty"`
	Message      *Message      `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	DB           *SpanDatabase `protobuf:"bytes,9,opt,name=db,proto3" json:"db,omitempty"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a02b2f7a528b73, []int{0}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return m.Size()
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Span) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Span) GetSubtype() string {
	if m != nil {
		return m.Subtype
	}
	return ""
}

func (m *Span) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Span) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *Span) GetStacktrace() []*Stackframe {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

func (m *Span) GetExperimental() *types.Value {
	if m != nil {
		return m.Experimental
	}
	return nil
}

func (m *Span) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Span) GetDB() *SpanDatabase {
	if m != nil {
		return m.DB
	}
	return nil
}

type SpanDestination struct {
	Service *SpanDestinationService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *SpanDestination) Reset()         { *m = SpanDestination{} }
func (m *SpanDestination) String() string { return proto.CompactTextString(m) }
func (*SpanDestination) ProtoMessage()    {}
func (*SpanDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a02b2f7a528b73, []int{1}
}
func (m *SpanDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanDestination.Merge(m, src)
}
func (m *SpanDestination) XXX_Size() int {
	return m.Size()
}
func (m *SpanDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanDestination.DiscardUnknown(m)
}

var xxx_messageInfo_SpanDestination proto.InternalMessageInfo

func (m *SpanDestination) GetService() *SpanDestinationService {
	if m != nil {
		return m.Service
	}
	return nil
}

type SpanDestinationService struct {
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *SpanDestinationService) Reset()         { *m = SpanDestinationService{} }
func (m *SpanDestinationService) String() string { return proto.CompactTextString(m) }
func (*SpanDestinationService) ProtoMessage()    {}
func (*SpanDestinationService) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a02b2f7a528b73, []int{2}
}
func (m *SpanDestinationService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanDestinationService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanDestinationService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanDestinationService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanDestinationService.Merge(m, src)
}
func (m *SpanDestinationService) XXX_Size() int {
	return m.Size()
}
func (m *SpanDestinationService) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanDestinationService.DiscardUnknown(m)
}

var xxx_messageInfo_SpanDestinationService proto.InternalMessageInfo

func (m *SpanDestinationService) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type SpanDatabase struct {
	Instance     string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Statement    string `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	Type         string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Username     string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Link         string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	RowsAffected int64  `protobuf:"varint,6,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
}

func (m *SpanDatabase) Reset()         { *m = SpanDatabase{} }
func (m *SpanDatabase) String() string { return proto.CompactTextString(m) }
func (*SpanDatabase) ProtoMessage()    {}
func (*SpanDatabase) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a02b2f7a528b73, []int{3}
}
func (m *SpanDatabase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanDatabase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanDatabase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanDatabase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanDatabase.Merge(m, src)
}
func (m *SpanDatabase) XXX_Size() int {
	return m.Size()
}
func (m *SpanDatabase) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanDatabase.DiscardUnknown(m)
}

var xxx_messageInfo_SpanDatabase proto.InternalMessageInfo

func (m *SpanDatabase) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *SpanDatabase) GetStatement() string {
	if m != nil {
		return m.Statement
	}
	return ""
}

func (m *SpanDatabase) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SpanDatabase) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SpanDatabase) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *SpanDatabase) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func init() {
	proto.RegisterType((*Span)(nil), "elastic.apm.model.Span")
	proto.RegisterType((*SpanDestination)(nil), "elastic.apm.model.SpanDestination")
	proto.RegisterType((*SpanDestinationService)(nil), "elastic.apm.model.SpanDestinationService")
	proto.RegisterType((*SpanDatabase)(nil), "elastic.apm.model.SpanDatabase")
}

func init() { proto.RegisterFile("apm-server/model/proto/span.proto", fileDescriptor_51a02b2f7a528b73) }

var fileDescriptor_51a02b2f7a528b73 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xde, 0xa4, 0x6b, 0x7f, 0x4c, 0x2b, 0xe2, 0x1c, 0x4a, 0x28, 0x6b, 0xb6, 0x56, 0xc1, 0x8a,
	0x6c, 0x02, 0x75, 0x41, 0x10, 0x3c, 0x58, 0xeb, 0xc1, 0x83, 0x97, 0x29, 0xec, 0xc1, 0x8b, 0xbc,
	0x24, 0xaf, 0x31, 0x6c, 0x32, 0x13, 0x66, 0x26, 0xea, 0xfe, 0x17, 0xfe, 0x2b, 0xfe, 0x17, 0x1e,
	0xf7, 0xe8, 0x49, 0xa4, 0xfd, 0x47, 0x24, 0x93, 0xa4, 0xad, 0x6c, 0x7b, 0x09, 0xef, 0x7b, 0xef,
	0xfb, 0x5e, 0x66, 0xbe, 0x7c, 0x21, 0x8f, 0x21, 0xcf, 0x2e, 0x14, 0xca, 0xaf, 0x28, 0xfd, 0x4c,
	0x44, 0x98, 0xfa, 0xb9, 0x14, 0x5a, 0xf8, 0x2a, 0x07, 0xee, 0x99, 0x92, 0x3e, 0xc4, 0x14, 0x94,
	0x4e, 0x42, 0x0f, 0xf2, 0xcc, 0x33, 0x9c, 0xd1, 0xd3, 0x23, 0xaa, 0x0c, 0x95, 0x82, 0x18, 0x2b,
	0xe1, 0xe8, 0xd9, 0xb1, 0xdd, 0x1a, 0xc2, 0xeb, 0x95, 0x84, 0xac, 0x21, 0x9e, 0xc5, 0x42, 0xc4,
	0x29, 0x56, 0xe3, 0xa0, 0x58, 0xf9, 0x4a, 0xcb, 0x22, 0xd4, 0xf5, 0xf4, 0x22, 0x4e, 0xf4, 0x97,
	0x22, 0xf0, 0x42, 0x91, 0xf9, 0xb1, 0x88, 0xc5, 0x8e, 0x56, 0xa2, 0x6a, 0x65, 0x59, 0x55, 0xf4,
	0xc9, 0xda, 0x26, 0xa7, 0xcb, 0x1c, 0x38, 0x1d, 0x12, 0x3b, 0x89, 0x1c, 0x6b, 0x6c, 0x4d, 0x7b,
	0xf3, 0xf6, 0xfa, 0xcf, 0xb9, 0xfd, 0x61, 0xc1, 0xec, 0x24, 0xa2, 0x94, 0x9c, 0xea, 0x9b, 0x1c,
	0x1d, 0xbb, 0x9c, 0x30, 0x53, 0x53, 0x87, 0x74, 0x54, 0x11, 0x98, 0x76, 0xcb, 0xb4, 0x1b, 0x48,
	0x87, 0xa4, 0x0d, 0xa1, 0x4e, 0x04, 0x77, 0x4e, 0xcd, 0xa0, 0x46, 0xe5, 0x16, 0x75, 0xc3, 0x43,
	0xe7, 0xde, 0xd8, 0x9a, 0x76, 0x99, 0xa9, 0xe9, 0x1b, 0x42, 0xcc, 0xdd, 0xb4, 0x84, 0x10, 0x9d,
	0xf6, 0xb8, 0x35, 0xed, 0xcf, 0x1e, 0x79, 0x77, 0xec, 0xf3, 0x96, 0x5b, 0x03, 0xd8, 0x9e, 0x80,
	0xbe, 0x26, 0x03, 0xfc, 0x9e, 0xa3, 0x4c, 0x32, 0xe4, 0x1a, 0x52, 0xa7, 0x33, 0xb6, 0xa6, 0xfd,
	0xd9, 0xd0, 0xab, 0xdc, 0xf1, 0x9a, 0x6b, 0x7b, 0x57, 0x90, 0x16, 0xc8, 0xfe, 0xe3, 0xd2, 0x4b,
	0xd2, 0xa9, 0xcd, 0x77, 0xba, 0x46, 0x36, 0x3a, 0xf0, 0xde, 0x8f, 0x15, 0x83, 0x35, 0x54, 0xfa,
	0x8a, 0xd8, 0x51, 0xe0, 0xf4, 0x8c, 0xe0, 0xfc, 0xd0, 0x41, 0x73, 0xe0, 0x0b, 0xd0, 0x10, 0x80,
	0xc2, 0xca, 0xc3, 0xc5, 0x9c, 0xd9, 0x51, 0x30, 0xb9, 0x22, 0x0f, 0xcc, 0x0c, 0x95, 0x4e, 0x38,
	0x18, 0x43, 0xde, 0x91, 0x4e, 0xf9, 0xad, 0x93, 0x10, 0x8d, 0xe7, 0xfd, 0xd9, 0xf3, 0x63, 0x0b,
	0x77, 0xa2, 0x65, 0x25, 0x60, 0x8d, 0x72, 0x72, 0x49, 0x86, 0x87, 0x29, 0x74, 0x44, 0xba, 0x12,
	0x95, 0x28, 0x64, 0xbd, 0xbf, 0xc7, 0xb6, 0x78, 0xf2, 0xd3, 0x22, 0x83, 0xfd, 0xa3, 0x96, 0xe4,
	0x84, 0x2b, 0x0d, 0x7c, 0x47, 0x6e, 0x30, 0x3d, 0x23, 0x3d, 0xa5, 0x41, 0x63, 0x69, 0x5c, 0x9d,
	0x81, 0x5d, 0x63, 0x1b, 0x8e, 0xd6, 0x5e, 0x38, 0x46, 0xa4, 0x5b, 0x28, 0x94, 0x1c, 0x32, 0xac,
	0x43, 0xb0, 0xc5, 0x25, 0x3f, 0x4d, 0xf8, 0xb5, 0x89, 0x41, 0x8f, 0x99, 0x9a, 0x3e, 0x21, 0xf7,
	0xa5, 0xf8, 0xa6, 0x3e, 0xc3, 0x6a, 0x85, 0xa1, 0xc6, 0xc8, 0x69, 0x8f, 0xad, 0x69, 0x8b, 0x0d,
	0xca, 0xe6, 0xdb, 0xba, 0x37, 0x7f, 0xff, 0x6b, 0xed, 0x5a, 0xb7, 0x6b, 0xd7, 0xfa, 0xbb, 0x76,
	0xad, 0x1f, 0x1b, 0xf7, 0xe4, 0x76, 0xe3, 0x9e, 0xfc, 0xde, 0xb8, 0x27, 0x9f, 0x5e, 0xec, 0xe5,
	0xbd, 0x76, 0xd0, 0xbf, 0xf3, 0x27, 0x99, 0x67, 0x1e, 0x04, 0x6d, 0x93, 0x8a, 0x97, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xfd, 0xf6, 0xc4, 0xec, 0xc8, 0x03, 0x00, 0x00,
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Span) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DB != nil {
		{
			size, err := m.DB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Experimental != nil {
		{
			size, err := m.Experimental.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Stacktrace) > 0 {
		for iNdEx := len(m.Stacktrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stacktrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Sync {
		i--
		if m.Sync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Subtype) > 0 {
		i -= len(m.Subtype)
		copy(dAtA[i:], m.Subtype)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Subtype)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpanDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanDestination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanDestination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpanDestinationService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanDestinationService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanDestinationService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpanDatabase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanDatabase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanDatabase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RowsAffected != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.RowsAffected))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Statement) > 0 {
		i -= len(m.Statement)
		copy(dAtA[i:], m.Statement)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Statement)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintSpan(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpan(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Subtype)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.Sync {
		n += 2
	}
	if len(m.Stacktrace) > 0 {
		for _, e := range m.Stacktrace {
			l = e.Size()
			n += 1 + l + sovSpan(uint64(l))
		}
	}
	if m.Experimental != nil {
		l = m.Experimental.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.DB != nil {
		l = m.DB.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	return n
}

func (m *SpanDestination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovSpan(uint64(l))
	}
	return n
}

func (m *SpanDestinationService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	return n
}

func (m *SpanDatabase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovSpan(uint64(l))
	}
	if m.RowsAffected != 0 {
		n += 1 + sovSpan(uint64(m.RowsAffected))
	}
	return n
}

func sovSpan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpan(x uint64) (n int) {
	return sovSpan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stacktrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stacktrace = append(m.Stacktrace, &Stackframe{})
			if err := m.Stacktrace[len(m.Stacktrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experimental", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Experimental == nil {
				m.Experimental = &types.Value{}
			}
			if err := m.Experimental.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DB == nil {
				m.DB = &SpanDatabase{}
			}
			if err := m.DB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &SpanDestinationService{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanDestinationService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanDestinationService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanDestinationService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanDatabase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanDatabase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanDatabase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsAffected", wireType)
			}
			m.RowsAffected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsAffected |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpan = fmt.Errorf("proto: unexpected end of group")
)
