// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/url.proto

package modelpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// URL the components of a parsed URL and/or the original URL value.
type URL struct {
	Original string `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	Full     string `protobuf:"bytes,2,opt,name=full,proto3" json:"full,omitempty"`
	Scheme   string `protobuf:"bytes,3,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Domain   string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Port     uint32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Path     string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Query    string `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	Fragment string `protobuf:"bytes,8,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (m *URL) Reset()         { *m = URL{} }
func (m *URL) String() string { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()    {}
func (*URL) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fb264cf6eb599da, []int{0}
}
func (m *URL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *URL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URL.Merge(m, src)
}
func (m *URL) XXX_Size() int {
	return m.Size()
}
func (m *URL) XXX_DiscardUnknown() {
	xxx_messageInfo_URL.DiscardUnknown(m)
}

var xxx_messageInfo_URL proto.InternalMessageInfo

func (m *URL) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *URL) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func (m *URL) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *URL) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *URL) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *URL) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *URL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *URL) GetFragment() string {
	if m != nil {
		return m.Fragment
	}
	return ""
}

func init() {
	proto.RegisterType((*URL)(nil), "elastic.apm.model.URL")
}

func init() { proto.RegisterFile("apm-server/model/proto/url.proto", fileDescriptor_7fb264cf6eb599da) }

var fileDescriptor_7fb264cf6eb599da = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4a, 0xc4, 0x30,
	0x18, 0xc7, 0x1b, 0xef, 0xae, 0x9e, 0x01, 0x07, 0x83, 0x48, 0x70, 0x08, 0xc5, 0xe9, 0x40, 0x6c,
	0x06, 0xdf, 0x40, 0x70, 0x73, 0x2a, 0xb8, 0xb8, 0xa5, 0xbd, 0x5c, 0x1b, 0x48, 0x9a, 0x98, 0xa6,
	0x82, 0x6f, 0xe1, 0x1b, 0xb9, 0x3a, 0xde, 0xe8, 0x28, 0xed, 0x8b, 0x48, 0xbe, 0x9c, 0x2e, 0xb7,
	0x84, 0xff, 0xef, 0x47, 0xf8, 0xf8, 0xbe, 0x3f, 0x2e, 0x84, 0x33, 0x77, 0x83, 0xf4, 0x6f, 0xd2,
	0x73, 0x63, 0xb7, 0x52, 0x73, 0xe7, 0x6d, 0xb0, 0x7c, 0xf4, 0xba, 0x84, 0x44, 0x2e, 0xa4, 0x16,
	0x43, 0x50, 0x4d, 0x29, 0x9c, 0x29, 0xe1, 0xcb, 0xcd, 0x27, 0xc2, 0x8b, 0xe7, 0xea, 0x89, 0x5c,
	0xe3, 0xb5, 0xf5, 0xaa, 0x55, 0xbd, 0xd0, 0x14, 0x15, 0x68, 0x73, 0x56, 0xfd, 0x33, 0x21, 0x78,
	0xb9, 0x1b, 0xb5, 0xa6, 0x27, 0xe0, 0x21, 0x93, 0x2b, 0x9c, 0x0f, 0x4d, 0x27, 0x8d, 0xa4, 0x0b,
	0xb0, 0x07, 0x8a, 0x7e, 0x6b, 0x8d, 0x50, 0x3d, 0x5d, 0x26, 0x9f, 0x28, 0xce, 0x70, 0xd6, 0x07,
	0xba, 0x2a, 0xd0, 0xe6, 0xbc, 0x82, 0x0c, 0x4e, 0x84, 0x8e, 0xe6, 0x69, 0x6e, 0xcc, 0xe4, 0x12,
	0xaf, 0x5e, 0x47, 0xe9, 0xdf, 0xe9, 0x29, 0xc8, 0x04, 0x71, 0xbb, 0x9d, 0x17, 0xad, 0x91, 0x7d,
	0xa0, 0xeb, 0xb4, 0xdd, 0x1f, 0x3f, 0x3c, 0x7e, 0x4d, 0x0c, 0xed, 0x27, 0x86, 0x7e, 0x26, 0x86,
	0x3e, 0x66, 0x96, 0xed, 0x67, 0x96, 0x7d, 0xcf, 0x2c, 0x7b, 0xb9, 0x6d, 0x55, 0xe8, 0xc6, 0xba,
	0x6c, 0xac, 0xe1, 0x87, 0xcb, 0xf9, 0x51, 0x47, 0xf0, 0xba, 0xba, 0xce, 0xa1, 0xa2, 0xfb, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xcc, 0x5d, 0x19, 0x46, 0x01, 0x00, 0x00,
}

func (m *URL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *URL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fragment) > 0 {
		i -= len(m.Fragment)
		copy(dAtA[i:], m.Fragment)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Fragment)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x32
	}
	if m.Port != 0 {
		i = encodeVarintUrl(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Scheme) > 0 {
		i -= len(m.Scheme)
		copy(dAtA[i:], m.Scheme)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Scheme)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Full) > 0 {
		i -= len(m.Full)
		copy(dAtA[i:], m.Full)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Full)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Original) > 0 {
		i -= len(m.Original)
		copy(dAtA[i:], m.Original)
		i = encodeVarintUrl(dAtA, i, uint64(len(m.Original)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUrl(dAtA []byte, offset int, v uint64) int {
	offset -= sovUrl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *URL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Original)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	l = len(m.Full)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	l = len(m.Scheme)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovUrl(uint64(m.Port))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	l = len(m.Fragment)
	if l > 0 {
		n += 1 + l + sovUrl(uint64(l))
	}
	return n
}

func sovUrl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUrl(x uint64) (n int) {
	return sovUrl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *URL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUrl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Original", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Original = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Full", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Full = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUrl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUrl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUrl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUrl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUrl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUrl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUrl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUrl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUrl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUrl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUrl = fmt.Errorf("proto: unexpected end of group")
)
