// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/stackframe.proto

package modelpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stackframe struct {
	AbsPath   string        `protobuf:"bytes,1,opt,name=abs_path,json=absPath,proto3" json:"abs_path,omitempty"`
	Filename  string        `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Classname string        `protobuf:"bytes,3,opt,name=classname,proto3" json:"classname,omitempty"`
	Module    string        `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	Function  string        `protobuf:"bytes,5,opt,name=function,proto3" json:"function,omitempty"`
	Line      int32         `protobuf:"varint,6,opt,name=line,proto3" json:"line,omitempty"`
	Column    int32         `protobuf:"varint,7,opt,name=column,proto3" json:"column,omitempty"`
	Vars      *types.Struct `protobuf:"bytes,8,opt,name=vars,proto3" json:"vars,omitempty"`
}

func (m *Stackframe) Reset()         { *m = Stackframe{} }
func (m *Stackframe) String() string { return proto.CompactTextString(m) }
func (*Stackframe) ProtoMessage()    {}
func (*Stackframe) Descriptor() ([]byte, []int) {
	return fileDescriptor_fed236e8d962f3e1, []int{0}
}
func (m *Stackframe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stackframe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stackframe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stackframe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stackframe.Merge(m, src)
}
func (m *Stackframe) XXX_Size() int {
	return m.Size()
}
func (m *Stackframe) XXX_DiscardUnknown() {
	xxx_messageInfo_Stackframe.DiscardUnknown(m)
}

var xxx_messageInfo_Stackframe proto.InternalMessageInfo

func (m *Stackframe) GetAbsPath() string {
	if m != nil {
		return m.AbsPath
	}
	return ""
}

func (m *Stackframe) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *Stackframe) GetClassname() string {
	if m != nil {
		return m.Classname
	}
	return ""
}

func (m *Stackframe) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Stackframe) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *Stackframe) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Stackframe) GetColumn() int32 {
	if m != nil {
		return m.Column
	}
	return 0
}

func (m *Stackframe) GetVars() *types.Struct {
	if m != nil {
		return m.Vars
	}
	return nil
}

func init() {
	proto.RegisterType((*Stackframe)(nil), "elastic.apm.model.Stackframe")
}

func init() {
	proto.RegisterFile("apm-server/model/proto/stackframe.proto", fileDescriptor_fed236e8d962f3e1)
}

var fileDescriptor_fed236e8d962f3e1 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x3d, 0x4e, 0x03, 0x31,
	0x10, 0x85, 0x63, 0xc8, 0xaf, 0xa9, 0x70, 0x01, 0x26, 0x8a, 0x56, 0x11, 0x0d, 0x91, 0x22, 0x6c,
	0x09, 0x6e, 0x80, 0x44, 0x8f, 0x92, 0x8e, 0x06, 0x8d, 0x1d, 0x27, 0x59, 0x61, 0xaf, 0x57, 0xfe,
	0xc9, 0x39, 0x38, 0x16, 0x65, 0x4a, 0x4a, 0x94, 0xf4, 0x9c, 0x01, 0x31, 0x59, 0x42, 0x41, 0x63,
	0xf9, 0xbd, 0x37, 0xf3, 0x49, 0x6f, 0xe8, 0x0d, 0xd4, 0xee, 0x36, 0x9a, 0xb0, 0x31, 0x41, 0x3a,
	0xbf, 0x30, 0x56, 0xd6, 0xc1, 0x27, 0x2f, 0x63, 0x02, 0xfd, 0xba, 0x0c, 0xe0, 0x8c, 0x40, 0x83,
	0x9d, 0x1b, 0x0b, 0x31, 0x95, 0x5a, 0x40, 0xed, 0x04, 0x4e, 0x0e, 0x47, 0x2b, 0xef, 0x57, 0xd6,
	0x1c, 0x36, 0x54, 0x5e, 0xca, 0x98, 0x42, 0xd6, 0xe9, 0xb0, 0x70, 0xfd, 0x45, 0x28, 0x9d, 0x1f,
	0x29, 0xec, 0x8a, 0xf6, 0x41, 0xc5, 0x97, 0x1a, 0xd2, 0x9a, 0x93, 0x31, 0x99, 0x0c, 0x66, 0x3d,
	0x50, 0xf1, 0x09, 0xd2, 0x9a, 0x0d, 0x69, 0x7f, 0x59, 0x5a, 0x53, 0x81, 0x33, 0xfc, 0x04, 0xa3,
	0xa3, 0x66, 0x23, 0x3a, 0xd0, 0x16, 0x62, 0xc4, 0xf0, 0x14, 0xc3, 0x3f, 0x83, 0x5d, 0xd0, 0xae,
	0xf3, 0x8b, 0x6c, 0x0d, 0x6f, 0x63, 0xd4, 0x28, 0x24, 0xe6, 0x4a, 0xa7, 0xd2, 0x57, 0xbc, 0xd3,
	0x10, 0x1b, 0xcd, 0x18, 0x6d, 0xdb, 0xb2, 0x32, 0xbc, 0x3b, 0x26, 0x93, 0xce, 0x0c, 0xff, 0x3f,
	0x1c, 0xed, 0x6d, 0x76, 0x15, 0xef, 0xa1, 0xdb, 0x28, 0x36, 0xa5, 0xed, 0x0d, 0x84, 0xc8, 0xfb,
	0x63, 0x32, 0x39, 0xbb, 0xbb, 0x14, 0x87, 0xc2, 0xe2, 0xb7, 0xb0, 0x98, 0x63, 0xe1, 0x19, 0x0e,
	0x3d, 0x3c, 0xbe, 0xef, 0x0a, 0xb2, 0xdd, 0x15, 0xe4, 0x73, 0x57, 0x90, 0xb7, 0x7d, 0xd1, 0xda,
	0xee, 0x8b, 0xd6, 0xc7, 0xbe, 0x68, 0x3d, 0x4f, 0x57, 0x65, 0x5a, 0x67, 0x25, 0xb4, 0x77, 0xb2,
	0x39, 0xa3, 0xfc, 0x77, 0x77, 0x7c, 0x6b, 0xa5, 0xba, 0x48, 0xbf, 0xff, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x79, 0xeb, 0xda, 0x9a, 0x01, 0x00, 0x00,
}

func (m *Stackframe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stackframe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stackframe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vars != nil {
		{
			size, err := m.Vars.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStackframe(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Column != 0 {
		i = encodeVarintStackframe(dAtA, i, uint64(m.Column))
		i--
		dAtA[i] = 0x38
	}
	if m.Line != 0 {
		i = encodeVarintStackframe(dAtA, i, uint64(m.Line))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Function) > 0 {
		i -= len(m.Function)
		copy(dAtA[i:], m.Function)
		i = encodeVarintStackframe(dAtA, i, uint64(len(m.Function)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintStackframe(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Classname) > 0 {
		i -= len(m.Classname)
		copy(dAtA[i:], m.Classname)
		i = encodeVarintStackframe(dAtA, i, uint64(len(m.Classname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintStackframe(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AbsPath) > 0 {
		i -= len(m.AbsPath)
		copy(dAtA[i:], m.AbsPath)
		i = encodeVarintStackframe(dAtA, i, uint64(len(m.AbsPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStackframe(dAtA []byte, offset int, v uint64) int {
	offset -= sovStackframe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stackframe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AbsPath)
	if l > 0 {
		n += 1 + l + sovStackframe(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovStackframe(uint64(l))
	}
	l = len(m.Classname)
	if l > 0 {
		n += 1 + l + sovStackframe(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovStackframe(uint64(l))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovStackframe(uint64(l))
	}
	if m.Line != 0 {
		n += 1 + sovStackframe(uint64(m.Line))
	}
	if m.Column != 0 {
		n += 1 + sovStackframe(uint64(m.Column))
	}
	if m.Vars != nil {
		l = m.Vars.Size()
		n += 1 + l + sovStackframe(uint64(l))
	}
	return n
}

func sovStackframe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStackframe(x uint64) (n int) {
	return sovStackframe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stackframe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStackframe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stackframe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stackframe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStackframe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStackframe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStackframe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStackframe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStackframe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStackframe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStackframe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStackframe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStackframe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStackframe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStackframe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStackframe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vars == nil {
				m.Vars = &types.Struct{}
			}
			if err := m.Vars.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStackframe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStackframe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStackframe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStackframe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStackframe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStackframe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStackframe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStackframe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStackframe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStackframe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStackframe = fmt.Errorf("proto: unexpected end of group")
)
