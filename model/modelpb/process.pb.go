// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/process.proto

package modelpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Process struct {
	PID         int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Args        []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	CommandLine string   `protobuf:"bytes,4,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	Executable  string   `protobuf:"bytes,5,opt,name=executable,proto3" json:"executable,omitempty"`
	Parent      *Process `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6947bc2930310b7, []int{0}
}
func (m *Process) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Process.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return m.Size()
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetPID() int64 {
	if m != nil {
		return m.PID
	}
	return 0
}

func (m *Process) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Process) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Process) GetCommandLine() string {
	if m != nil {
		return m.CommandLine
	}
	return ""
}

func (m *Process) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *Process) GetParent() *Process {
	if m != nil {
		return m.Parent
	}
	return nil
}

func init() {
	proto.RegisterType((*Process)(nil), "elastic.apm.model.Process")
}

func init() {
	proto.RegisterFile("apm-server/model/proto/process.proto", fileDescriptor_a6947bc2930310b7)
}

var fileDescriptor_a6947bc2930310b7 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x17, 0xbb, 0x75, 0x2c, 0xf3, 0x62, 0xf0, 0x10, 0x77, 0x88, 0x55, 0x3c, 0x14, 0x64,
	0x29, 0xcc, 0x7f, 0x30, 0xf4, 0x20, 0x78, 0x18, 0x3d, 0x7a, 0x91, 0xb4, 0xfd, 0xac, 0x81, 0xa6,
	0x09, 0x6d, 0x2a, 0xfe, 0x0c, 0xff, 0x94, 0xe0, 0x71, 0x47, 0x4f, 0x22, 0xed, 0x1f, 0x91, 0xa6,
	0x3d, 0x0c, 0x76, 0xf9, 0xf8, 0xde, 0x97, 0xf7, 0x7b, 0x48, 0x5e, 0x7c, 0x23, 0x8c, 0x5a, 0xd7,
	0x50, 0xbd, 0x43, 0x15, 0x29, 0x9d, 0x41, 0x11, 0x99, 0x4a, 0x5b, 0xdd, 0xcf, 0x14, 0xea, 0x9a,
	0x3b, 0x45, 0xce, 0xa0, 0x10, 0xb5, 0x95, 0x29, 0x17, 0x46, 0x71, 0x17, 0x5b, 0xad, 0x73, 0x69,
	0xdf, 0x9a, 0x84, 0xa7, 0x5a, 0x45, 0xb9, 0xce, 0xf5, 0x70, 0x97, 0x34, 0xaf, 0x4e, 0x0d, 0x90,
	0x7e, 0x1b, 0x08, 0xd7, 0x5f, 0x08, 0xcf, 0x77, 0x03, 0x93, 0x5c, 0x60, 0xcf, 0xc8, 0x8c, 0xa2,
	0x00, 0x85, 0xde, 0x76, 0xde, 0xfe, 0x5e, 0x7a, 0xbb, 0xc7, 0xfb, 0xb8, 0xf7, 0xc8, 0x39, 0x9e,
	0x59, 0x69, 0x0b, 0xa0, 0x27, 0x01, 0x0a, 0x17, 0xf1, 0x20, 0x08, 0xc1, 0x53, 0x51, 0xe5, 0x35,
	0xf5, 0x02, 0x2f, 0x5c, 0xc4, 0x6e, 0x27, 0x57, 0xf8, 0x34, 0xd5, 0x4a, 0x89, 0x32, 0x7b, 0x29,
	0x64, 0x09, 0x74, 0xea, 0x0e, 0x96, 0xa3, 0xf7, 0x24, 0x4b, 0x20, 0x0c, 0x63, 0xf8, 0x80, 0xb4,
	0xb1, 0x22, 0x29, 0x80, 0xce, 0x5c, 0xe0, 0xc0, 0x21, 0x1b, 0xec, 0x1b, 0x51, 0x41, 0x69, 0xa9,
	0x1f, 0xa0, 0x70, 0xb9, 0x59, 0xf1, 0xa3, 0x6f, 0xf2, 0xf1, 0xcd, 0xf1, 0x98, 0xdc, 0x3e, 0x7c,
	0xb7, 0x0c, 0xed, 0x5b, 0x86, 0xfe, 0x5a, 0x86, 0x3e, 0x3b, 0x36, 0xd9, 0x77, 0x6c, 0xf2, 0xd3,
	0xb1, 0xc9, 0xf3, 0xed, 0x41, 0x21, 0x23, 0x27, 0x3a, 0x2a, 0xd7, 0x4d, 0x93, 0x24, 0xbe, 0x6b,
	0xe5, 0xee, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x59, 0x1b, 0x43, 0x7f, 0x01, 0x00, 0x00,
}

func (m *Process) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Process) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Process) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parent != nil {
		{
			size, err := m.Parent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProcess(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Executable) > 0 {
		i -= len(m.Executable)
		copy(dAtA[i:], m.Executable)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.Executable)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CommandLine) > 0 {
		i -= len(m.CommandLine)
		copy(dAtA[i:], m.CommandLine)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.CommandLine)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintProcess(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProcess(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.PID != 0 {
		i = encodeVarintProcess(dAtA, i, uint64(m.PID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProcess(dAtA []byte, offset int, v uint64) int {
	offset -= sovProcess(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Process) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PID != 0 {
		n += 1 + sovProcess(uint64(m.PID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovProcess(uint64(l))
		}
	}
	l = len(m.CommandLine)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	l = len(m.Executable)
	if l > 0 {
		n += 1 + l + sovProcess(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovProcess(uint64(l))
	}
	return n
}

func sovProcess(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProcess(x uint64) (n int) {
	return sovProcess(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Process) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Process: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Process: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PID", wireType)
			}
			m.PID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandLine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProcess
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProcess
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &Process{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProcess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProcess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProcess(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProcess
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProcess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProcess
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProcess
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProcess
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProcess        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProcess          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProcess = fmt.Errorf("proto: unexpected end of group")
)
