// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/error.proto

package modelpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Error struct {
	ID        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Culprit   string          `protobuf:"bytes,2,opt,name=culprit,proto3" json:"culprit,omitempty"`
	Exception *ErrorException `protobuf:"bytes,11,opt,name=exception,proto3" json:"exception,omitempty"`
	Log       *ErrorLog       `protobuf:"bytes,12,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_434aca90789e4e6e, []int{0}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Error) GetCulprit() string {
	if m != nil {
		return m.Culprit
	}
	return ""
}

func (m *Error) GetException() *ErrorException {
	if m != nil {
		return m.Exception
	}
	return nil
}

func (m *Error) GetLog() *ErrorLog {
	if m != nil {
		return m.Log
	}
	return nil
}

type ErrorException struct {
	Message    string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Module     string        `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Type       string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Handled    bool          `protobuf:"varint,4,opt,name=handled,proto3" json:"handled,omitempty"`
	Attributes *types.Struct `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Stacktrace []*Stackframe `protobuf:"bytes,6,rep,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	// Types that are valid to be assigned to Code:
	//	*ErrorException_StringCode
	//	*ErrorException_IntCode
	Code isErrorException_Code `protobuf_oneof:"code"`
}

func (m *ErrorException) Reset()         { *m = ErrorException{} }
func (m *ErrorException) String() string { return proto.CompactTextString(m) }
func (*ErrorException) ProtoMessage()    {}
func (*ErrorException) Descriptor() ([]byte, []int) {
	return fileDescriptor_434aca90789e4e6e, []int{1}
}
func (m *ErrorException) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorException.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorException.Merge(m, src)
}
func (m *ErrorException) XXX_Size() int {
	return m.Size()
}
func (m *ErrorException) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorException.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorException proto.InternalMessageInfo

type isErrorException_Code interface {
	isErrorException_Code()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ErrorException_StringCode struct {
	StringCode string `protobuf:"bytes,7,opt,name=string_code,json=stringCode,proto3,oneof" json:"string_code,omitempty"`
}
type ErrorException_IntCode struct {
	IntCode int64 `protobuf:"varint,8,opt,name=int_code,json=intCode,proto3,oneof" json:"int_code,omitempty"`
}

func (*ErrorException_StringCode) isErrorException_Code() {}
func (*ErrorException_IntCode) isErrorException_Code()    {}

func (m *ErrorException) GetCode() isErrorException_Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ErrorException) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorException) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ErrorException) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ErrorException) GetHandled() bool {
	if m != nil {
		return m.Handled
	}
	return false
}

func (m *ErrorException) GetAttributes() *types.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ErrorException) GetStacktrace() []*Stackframe {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

func (m *ErrorException) GetStringCode() string {
	if x, ok := m.GetCode().(*ErrorException_StringCode); ok {
		return x.StringCode
	}
	return ""
}

func (m *ErrorException) GetIntCode() int64 {
	if x, ok := m.GetCode().(*ErrorException_IntCode); ok {
		return x.IntCode
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ErrorException) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ErrorException_StringCode)(nil),
		(*ErrorException_IntCode)(nil),
	}
}

type ErrorLog struct {
	Level        string        `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Message      string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ParamMessage string        `protobuf:"bytes,3,opt,name=param_message,json=paramMessage,proto3" json:"param_message,omitempty"`
	LoggerName   string        `protobuf:"bytes,4,opt,name=logger_name,json=loggerName,proto3" json:"logger_name,omitempty"`
	Stacktrace   []*Stackframe `protobuf:"bytes,5,rep,name=stacktrace,proto3" json:"stacktrace,omitempty"`
}

func (m *ErrorLog) Reset()         { *m = ErrorLog{} }
func (m *ErrorLog) String() string { return proto.CompactTextString(m) }
func (*ErrorLog) ProtoMessage()    {}
func (*ErrorLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_434aca90789e4e6e, []int{2}
}
func (m *ErrorLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorLog.Merge(m, src)
}
func (m *ErrorLog) XXX_Size() int {
	return m.Size()
}
func (m *ErrorLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorLog.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorLog proto.InternalMessageInfo

func (m *ErrorLog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ErrorLog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorLog) GetParamMessage() string {
	if m != nil {
		return m.ParamMessage
	}
	return ""
}

func (m *ErrorLog) GetLoggerName() string {
	if m != nil {
		return m.LoggerName
	}
	return ""
}

func (m *ErrorLog) GetStacktrace() []*Stackframe {
	if m != nil {
		return m.Stacktrace
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "elastic.apm.model.Error")
	proto.RegisterType((*ErrorException)(nil), "elastic.apm.model.ErrorException")
	proto.RegisterType((*ErrorLog)(nil), "elastic.apm.model.ErrorLog")
}

func init() {
	proto.RegisterFile("apm-server/model/proto/error.proto", fileDescriptor_434aca90789e4e6e)
}

var fileDescriptor_434aca90789e4e6e = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9d, 0xef, 0x49, 0x41, 0x62, 0x85, 0x8a, 0xd5, 0x82, 0x9b, 0x86, 0x03, 0x91, 0x50,
	0x6c, 0xa9, 0x1c, 0x38, 0x21, 0xa4, 0x40, 0xa4, 0x22, 0x01, 0x07, 0xf7, 0xc6, 0x25, 0xda, 0xd8,
	0xd3, 0xad, 0x85, 0xd7, 0x6b, 0xad, 0xd7, 0x15, 0xfc, 0x0b, 0xfe, 0x06, 0x37, 0xfe, 0x01, 0x57,
	0x8e, 0x3d, 0x72, 0x42, 0x28, 0xf9, 0x23, 0x68, 0x77, 0x6d, 0x9a, 0x52, 0x7a, 0xe8, 0x25, 0x9a,
	0x99, 0xf7, 0xde, 0xe8, 0xed, 0x9b, 0x18, 0x26, 0xb4, 0xe0, 0xb3, 0x12, 0xe5, 0x39, 0xca, 0x90,
	0x8b, 0x04, 0xb3, 0xb0, 0x90, 0x42, 0x89, 0x10, 0xa5, 0x14, 0x32, 0x30, 0x35, 0xb9, 0x87, 0x19,
	0x2d, 0x55, 0x1a, 0x07, 0xb4, 0xe0, 0x81, 0x21, 0xed, 0x3d, 0xb9, 0x41, 0x56, 0x2a, 0x1a, 0x7f,
	0x3c, 0x95, 0x94, 0xa3, 0xd5, 0xee, 0x3d, 0x64, 0x42, 0xb0, 0x0c, 0x2d, 0xbc, 0xaa, 0x4e, 0xc3,
	0x52, 0xc9, 0x2a, 0x56, 0x35, 0x3a, 0x63, 0xa9, 0x3a, 0xab, 0x56, 0x41, 0x2c, 0x78, 0xc8, 0x04,
	0x13, 0x97, 0x34, 0xdd, 0xd9, 0x95, 0xba, 0xb2, 0xf4, 0xc9, 0x57, 0x07, 0xba, 0x0b, 0x6d, 0x8c,
	0xec, 0x82, 0x9b, 0x26, 0x9e, 0x33, 0x76, 0xa6, 0xc3, 0x79, 0x6f, 0xfd, 0xeb, 0xc0, 0x7d, 0xf3,
	0x3a, 0x72, 0xd3, 0x84, 0x78, 0xd0, 0x8f, 0xab, 0xac, 0x90, 0xa9, 0xf2, 0x5c, 0x0d, 0x46, 0x4d,
	0x4b, 0x5e, 0xc2, 0x10, 0x3f, 0xc5, 0x58, 0xa8, 0x54, 0xe4, 0xde, 0x68, 0xec, 0x4c, 0x47, 0x47,
	0x87, 0xc1, 0xb5, 0x87, 0x05, 0x66, 0xfd, 0xa2, 0x21, 0x46, 0x97, 0x1a, 0x32, 0x83, 0x76, 0x26,
	0x98, 0xb7, 0x63, 0xa4, 0xfb, 0x37, 0x49, 0xdf, 0x0a, 0x16, 0x69, 0xde, 0xe4, 0x9b, 0x0b, 0x77,
	0xaf, 0x2e, 0xd3, 0xe6, 0x38, 0x96, 0x25, 0x65, 0x68, 0x9d, 0x47, 0x4d, 0x4b, 0x76, 0xa1, 0xc7,
	0x45, 0x52, 0x65, 0x58, 0xbb, 0xae, 0x3b, 0x42, 0xa0, 0xa3, 0x3e, 0x17, 0xe8, 0xb5, 0xcd, 0xd4,
	0xd4, 0x7a, 0xcb, 0x19, 0xcd, 0x93, 0x0c, 0x13, 0xaf, 0x33, 0x76, 0xa6, 0x83, 0xa8, 0x69, 0xc9,
	0x73, 0x00, 0xaa, 0x94, 0x4c, 0x57, 0x95, 0xc2, 0xd2, 0xeb, 0x1a, 0xa3, 0x0f, 0x02, 0x7b, 0x80,
	0xa0, 0x49, 0x36, 0x38, 0x31, 0x07, 0x88, 0xb6, 0xa8, 0xe4, 0x05, 0x80, 0x39, 0x9c, 0x92, 0x34,
	0x46, 0xaf, 0x37, 0x6e, 0x4f, 0x47, 0x47, 0x8f, 0xfe, 0xf3, 0xc2, 0x93, 0xbf, 0xd7, 0x8d, 0xb6,
	0x04, 0xe4, 0x10, 0x46, 0xa5, 0x92, 0x69, 0xce, 0x96, 0xb1, 0x48, 0xd0, 0xeb, 0x6b, 0xb3, 0xc7,
	0x2d, 0x4d, 0xd1, 0xc3, 0x57, 0x22, 0x41, 0xb2, 0x0f, 0x83, 0x34, 0x57, 0x16, 0x1f, 0x8c, 0x9d,
	0x69, 0xfb, 0xb8, 0x15, 0xf5, 0xd3, 0x5c, 0x69, 0x70, 0xde, 0x83, 0x8e, 0x06, 0x26, 0xdf, 0x1d,
	0x18, 0x34, 0x21, 0x92, 0xfb, 0xd0, 0xcd, 0xf0, 0x1c, 0xb3, 0x3a, 0x2a, 0xdb, 0x6c, 0x47, 0xe8,
	0x5e, 0x8d, 0xf0, 0x31, 0xdc, 0x29, 0xa8, 0xa4, 0x7c, 0xd9, 0xe0, 0x36, 0xb3, 0x1d, 0x33, 0x7c,
	0x57, 0x93, 0x0e, 0x60, 0x94, 0x09, 0xc6, 0x50, 0x2e, 0x73, 0xca, 0xd1, 0xe4, 0x37, 0x8c, 0xc0,
	0x8e, 0xde, 0x53, 0x8e, 0xff, 0x24, 0xd1, 0xbd, 0x65, 0x12, 0xf3, 0xc5, 0x8f, 0xb5, 0xef, 0x5c,
	0xac, 0x7d, 0xe7, 0xf7, 0xda, 0x77, 0xbe, 0x6c, 0xfc, 0xd6, 0xc5, 0xc6, 0x6f, 0xfd, 0xdc, 0xf8,
	0xad, 0x0f, 0x4f, 0xb7, 0xfe, 0xe9, 0xf5, 0xba, 0xf0, 0xda, 0x37, 0x64, 0x7e, 0x8b, 0xd5, 0xaa,
	0x67, 0x8e, 0xf5, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x41, 0x4a, 0x18, 0x9d, 0x03,
	0x00, 0x00,
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Log != nil {
		{
			size, err := m.Log.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Exception != nil {
		{
			size, err := m.Exception.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Culprit) > 0 {
		i -= len(m.Culprit)
		copy(dAtA[i:], m.Culprit)
		i = encodeVarintError(dAtA, i, uint64(len(m.Culprit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintError(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorException) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorException) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorException) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != nil {
		{
			size := m.Code.Size()
			i -= size
			if _, err := m.Code.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Stacktrace) > 0 {
		for iNdEx := len(m.Stacktrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stacktrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintError(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Handled {
		i--
		if m.Handled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintError(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintError(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintError(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorException_StringCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorException_StringCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringCode)
	copy(dAtA[i:], m.StringCode)
	i = encodeVarintError(dAtA, i, uint64(len(m.StringCode)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *ErrorException_IntCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorException_IntCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintError(dAtA, i, uint64(m.IntCode))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *ErrorLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stacktrace) > 0 {
		for iNdEx := len(m.Stacktrace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stacktrace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintError(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LoggerName) > 0 {
		i -= len(m.LoggerName)
		copy(dAtA[i:], m.LoggerName)
		i = encodeVarintError(dAtA, i, uint64(len(m.LoggerName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParamMessage) > 0 {
		i -= len(m.ParamMessage)
		copy(dAtA[i:], m.ParamMessage)
		i = encodeVarintError(dAtA, i, uint64(len(m.ParamMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintError(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintError(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	offset -= sovError(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Culprit)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.Exception != nil {
		l = m.Exception.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if m.Log != nil {
		l = m.Log.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}

func (m *ErrorException) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.Handled {
		n += 2
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovError(uint64(l))
	}
	if len(m.Stacktrace) > 0 {
		for _, e := range m.Stacktrace {
			l = e.Size()
			n += 1 + l + sovError(uint64(l))
		}
	}
	if m.Code != nil {
		n += m.Code.Size()
	}
	return n
}

func (m *ErrorException_StringCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringCode)
	n += 1 + l + sovError(uint64(l))
	return n
}
func (m *ErrorException_IntCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovError(uint64(m.IntCode))
	return n
}
func (m *ErrorLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.ParamMessage)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.LoggerName)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if len(m.Stacktrace) > 0 {
		for _, e := range m.Stacktrace {
			l = e.Size()
			n += 1 + l + sovError(uint64(l))
		}
	}
	return n
}

func sovError(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Culprit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Culprit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exception == nil {
				m.Exception = &ErrorException{}
			}
			if err := m.Exception.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = &ErrorLog{}
			}
			if err := m.Log.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorException) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorException: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorException: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Handled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &types.Struct{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stacktrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stacktrace = append(m.Stacktrace, &Stackframe{})
			if err := m.Stacktrace[len(m.Stacktrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = &ErrorException_StringCode{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntCode", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &ErrorException_IntCode{v}
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stacktrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stacktrace = append(m.Stacktrace, &Stackframe{})
			if err := m.Stacktrace[len(m.Stacktrace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupError
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthError
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthError        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupError = fmt.Errorf("proto: unexpected end of group")
)
