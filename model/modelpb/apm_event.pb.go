// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/apm_event.proto

package modelpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type APMEvent struct {
	Timestamp   time.Time              `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"@timestamp"`
	Event       *Event                 `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	Trace       *Trace                 `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	Transaction *Transaction           `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Span        *Span                  `protobuf:"bytes,5,opt,name=span,proto3" json:"span,omitempty"`
	Metricset   *Metricset             `protobuf:"bytes,6,opt,name=metricset,proto3" json:"metricset,omitempty"`
	Parent      *Parent                `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent,omitempty"`
	Agent       *Agent                 `protobuf:"bytes,8,opt,name=agent,proto3" json:"agent,omitempty"`
	Client      *Client                `protobuf:"bytes,9,opt,name=client,proto3" json:"client,omitempty"`
	Cloud       *Cloud                 `protobuf:"bytes,10,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Container   *Container             `protobuf:"bytes,11,opt,name=container,proto3" json:"container,omitempty"`
	Host        *Host                  `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`
	Kubernetes  *Kubernetes            `protobuf:"bytes,13,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	Labels      map[string]*LabelValue `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Process     *Process               `protobuf:"bytes,15,opt,name=process,proto3" json:"process,omitempty"`
	Service     *Service               `protobuf:"bytes,16,opt,name=service,proto3" json:"service,omitempty"`
	Session     *Session               `protobuf:"bytes,17,opt,name=session,proto3" json:"session,omitempty"`
	User        *User                  `protobuf:"bytes,18,opt,name=user,proto3" json:"user,omitempty"`
	UserAgent   *UserAgent             `protobuf:"bytes,19,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	HTTP        *HTTP                  `protobuf:"bytes,20,opt,name=http,proto3" json:"http,omitempty"`
	URL         *URL                   `protobuf:"bytes,21,opt,name=url,proto3" json:"url,omitempty"`
	Child       *Child                 `protobuf:"bytes,22,opt,name=child,proto3" json:"child,omitempty"`
	Error       *Error                 `protobuf:"bytes,23,opt,name=error,proto3" json:"error,omitempty"`
	DataStream  *DataStream            `protobuf:"bytes,25,opt,name=data_stream,json=dataStream,proto3" json:"data_stream,omitempty"`
}

func (m *APMEvent) Reset()         { *m = APMEvent{} }
func (m *APMEvent) String() string { return proto.CompactTextString(m) }
func (*APMEvent) ProtoMessage()    {}
func (*APMEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_986fac383ac6b440, []int{0}
}
func (m *APMEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APMEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APMEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APMEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APMEvent.Merge(m, src)
}
func (m *APMEvent) XXX_Size() int {
	return m.Size()
}
func (m *APMEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_APMEvent.DiscardUnknown(m)
}

var xxx_messageInfo_APMEvent proto.InternalMessageInfo

func (m *APMEvent) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *APMEvent) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *APMEvent) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (m *APMEvent) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *APMEvent) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (m *APMEvent) GetMetricset() *Metricset {
	if m != nil {
		return m.Metricset
	}
	return nil
}

func (m *APMEvent) GetParent() *Parent {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *APMEvent) GetAgent() *Agent {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *APMEvent) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *APMEvent) GetCloud() *Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func (m *APMEvent) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *APMEvent) GetHost() *Host {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *APMEvent) GetKubernetes() *Kubernetes {
	if m != nil {
		return m.Kubernetes
	}
	return nil
}

func (m *APMEvent) GetLabels() map[string]*LabelValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *APMEvent) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *APMEvent) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *APMEvent) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *APMEvent) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *APMEvent) GetUserAgent() *UserAgent {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

func (m *APMEvent) GetHTTP() *HTTP {
	if m != nil {
		return m.HTTP
	}
	return nil
}

func (m *APMEvent) GetURL() *URL {
	if m != nil {
		return m.URL
	}
	return nil
}

func (m *APMEvent) GetChild() *Child {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *APMEvent) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *APMEvent) GetDataStream() *DataStream {
	if m != nil {
		return m.DataStream
	}
	return nil
}

func init() {
	proto.RegisterType((*APMEvent)(nil), "elastic.apm.model.APMEvent")
	proto.RegisterMapType((map[string]*LabelValue)(nil), "elastic.apm.model.APMEvent.LabelsEntry")
}

func init() {
	proto.RegisterFile("apm-server/model/proto/apm_event.proto", fileDescriptor_986fac383ac6b440)
}

var fileDescriptor_986fac383ac6b440 = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xcd, 0x4e, 0x2b, 0x37,
	0x14, 0xc7, 0x93, 0x9b, 0x10, 0x88, 0xd3, 0x8f, 0x7b, 0xdd, 0x16, 0x4c, 0xd4, 0x26, 0x94, 0x56,
	0x80, 0x84, 0x98, 0x08, 0x68, 0xa5, 0x8a, 0xaa, 0x2d, 0x84, 0x22, 0x55, 0x2a, 0x48, 0x91, 0x09,
	0x55, 0xd5, 0x0d, 0x72, 0x12, 0x37, 0x8c, 0x98, 0x2f, 0xd9, 0x1e, 0x24, 0x5e, 0xa0, 0x6b, 0x1e,
	0x8b, 0x25, 0xcb, 0xae, 0xd2, 0x2a, 0xec, 0xfa, 0x14, 0x95, 0x8f, 0xe7, 0x23, 0x12, 0x63, 0xe6,
	0x6e, 0xc0, 0x83, 0x7f, 0xff, 0x73, 0xac, 0x73, 0x8e, 0xff, 0x06, 0x6d, 0xb1, 0xc8, 0xdf, 0x93,
	0x5c, 0xdc, 0x71, 0xd1, 0xf3, 0xc3, 0x09, 0xf7, 0x7a, 0x91, 0x08, 0x55, 0xd8, 0x63, 0x91, 0x7f,
	0xcd, 0xef, 0x78, 0xa0, 0x1c, 0xf8, 0xc6, 0xef, 0xb8, 0xc7, 0xa4, 0x72, 0xc7, 0x0e, 0x8b, 0x7c,
	0x07, 0xc0, 0xf6, 0xa6, 0x4d, 0x3a, 0xcd, 0x64, 0x56, 0x66, 0x7c, 0xe3, 0x7a, 0x93, 0x84, 0xf9,
	0xca, 0xc6, 0x78, 0xee, 0x7b, 0x04, 0xf2, 0xc2, 0xb8, 0x34, 0x50, 0xe8, 0xfb, 0x61, 0x90, 0x40,
	0x5b, 0x56, 0x28, 0x50, 0xcc, 0x0d, 0xb8, 0x48, 0xb8, 0x6d, 0x0b, 0x37, 0x61, 0x8a, 0x49, 0x25,
	0x38, 0xf3, 0x4b, 0x4e, 0xc6, 0x85, 0x08, 0x45, 0x19, 0x93, 0x57, 0xb8, 0xfd, 0xa5, 0x85, 0xb9,
	0x09, 0x65, 0x29, 0xa2, 0x54, 0x54, 0x72, 0xec, 0xdb, 0x78, 0xc4, 0x45, 0xc0, 0x15, 0x97, 0x25,
	0x75, 0xf0, 0xb9, 0x12, 0xee, 0x58, 0x72, 0x55, 0x52, 0xd4, 0x88, 0x89, 0xfc, 0xec, 0x5f, 0xdb,
	0x20, 0x11, 0x8e, 0xb9, 0x94, 0x25, 0x94, 0xfe, 0x93, 0x3b, 0xe6, 0xa5, 0x94, 0x94, 0x6e, 0xd6,
	0x46, 0x5b, 0x29, 0x64, 0xc4, 0x82, 0x92, 0xa2, 0x2b, 0xc1, 0xb2, 0x64, 0x3b, 0x76, 0x26, 0x90,
	0x6c, 0xac, 0xf2, 0x84, 0x1b, 0x16, 0x32, 0x16, 0x5e, 0xc9, 0x91, 0x62, 0x99, 0x0d, 0xd5, 0xd6,
	0x2b, 0xc8, 0xe2, 0xb5, 0xe9, 0x4e, 0xc3, 0x70, 0xea, 0x71, 0xb3, 0x3b, 0x8a, 0xff, 0xec, 0x29,
	0xd7, 0xe7, 0x52, 0x31, 0x3f, 0x6d, 0xf3, 0xde, 0xd4, 0x55, 0x37, 0xf1, 0xc8, 0x19, 0x87, 0x7e,
	0x6f, 0x1a, 0x4e, 0xc3, 0x9c, 0xd4, 0x5f, 0x26, 0xa8, 0x5e, 0x19, 0x7c, 0xf3, 0xaf, 0x16, 0x5a,
	0x39, 0x19, 0x5c, 0x9c, 0xe9, 0x71, 0xc3, 0x03, 0xd4, 0xcc, 0xc2, 0x91, 0xea, 0x46, 0x75, 0xa7,
	0x75, 0xd0, 0x76, 0x4c, 0x42, 0x27, 0x0d, 0xe3, 0x0c, 0x53, 0xa2, 0xbf, 0xfa, 0x38, 0xeb, 0x56,
	0xfe, 0x9b, 0x75, 0xd1, 0x71, 0xa6, 0x7a, 0xf8, 0xa7, 0x5b, 0xa5, 0x79, 0x10, 0xec, 0xa0, 0x25,
	0x98, 0x64, 0xf2, 0x06, 0xa2, 0x11, 0xe7, 0x85, 0x59, 0x38, 0x90, 0x9a, 0x1a, 0x4c, 0xf3, 0xd0,
	0x04, 0x52, 0xb3, 0xf2, 0x43, 0xbd, 0x4f, 0x0d, 0x86, 0x8f, 0x51, 0x6b, 0xa1, 0x21, 0xa4, 0x0e,
	0xaa, 0x4e, 0xb1, 0x2a, 0xa5, 0xe8, 0xa2, 0x04, 0xef, 0xa2, 0xba, 0x9e, 0x0c, 0xb2, 0x04, 0xd2,
	0xb5, 0x02, 0xe9, 0x65, 0xc4, 0x02, 0x0a, 0x10, 0x3e, 0x42, 0xcd, 0xec, 0x16, 0x90, 0x06, 0x28,
	0x3e, 0x2f, 0x50, 0x5c, 0xa4, 0x0c, 0xcd, 0x71, 0xbc, 0x8f, 0x1a, 0xe6, 0x66, 0x90, 0x65, 0x10,
	0xae, 0x17, 0x08, 0x07, 0x00, 0xd0, 0x04, 0xd4, 0xd5, 0x80, 0xde, 0x93, 0x15, 0x6b, 0x35, 0x4e,
	0xa6, 0x50, 0x3d, 0xc0, 0x74, 0x0a, 0x63, 0x8d, 0xa4, 0x69, 0x4d, 0x71, 0x0a, 0x00, 0x4d, 0x40,
	0x9d, 0x02, 0x8c, 0x92, 0x20, 0x6b, 0x8a, 0x53, 0xbd, 0x4f, 0x0d, 0xa6, 0x2b, 0x90, 0xf9, 0x21,
	0x69, 0x59, 0x2b, 0x70, 0x9a, 0x32, 0x34, 0xc7, 0x75, 0xa9, 0xb5, 0x65, 0x91, 0x0f, 0xac, 0xa5,
	0xfe, 0x25, 0x94, 0x8a, 0x02, 0x84, 0x7f, 0x40, 0x28, 0x77, 0x26, 0xf2, 0x21, 0x48, 0xbe, 0x28,
	0x90, 0xfc, 0x9a, 0x41, 0x74, 0x41, 0x80, 0x7f, 0x42, 0x0d, 0x8f, 0x8d, 0xb8, 0x27, 0xc9, 0x47,
	0x1b, 0xb5, 0x9d, 0xd6, 0xc1, 0x76, 0x51, 0xed, 0x92, 0xb9, 0x77, 0xce, 0x81, 0x3c, 0x0b, 0x94,
	0xb8, 0xa7, 0x89, 0x0c, 0x7f, 0x83, 0x96, 0x13, 0x8f, 0x22, 0x1f, 0x27, 0x37, 0xa1, 0xa0, 0x5f,
	0x86, 0xa0, 0x29, 0xaa, 0x55, 0x89, 0x67, 0x91, 0xb7, 0x56, 0xd5, 0xa5, 0x21, 0x68, 0x8a, 0x1a,
	0x15, 0x78, 0x18, 0x79, 0xf7, 0x8a, 0x0a, 0x08, 0x9a, 0xa2, 0xba, 0x9c, 0xda, 0x1d, 0x08, 0xb6,
	0x96, 0xf3, 0x4a, 0x72, 0x41, 0x01, 0xc2, 0xdf, 0x23, 0xa4, 0x7f, 0x5f, 0x9b, 0x79, 0xfa, 0xc4,
	0xda, 0x38, 0x2d, 0x31, 0x33, 0xd5, 0x8c, 0xd3, 0x25, 0xfe, 0x16, 0xd5, 0xf5, 0x43, 0x42, 0x3e,
	0xb5, 0x37, 0x6e, 0x38, 0x1c, 0xf4, 0x57, 0xe6, 0xb3, 0x6e, 0x5d, 0xaf, 0x28, 0xe0, 0x78, 0x1f,
	0xd5, 0x62, 0xe1, 0x91, 0xcf, 0x40, 0xb5, 0x5a, 0x94, 0x8c, 0x9e, 0xf7, 0x97, 0xe7, 0xb3, 0x6e,
	0xed, 0x8a, 0x9e, 0x53, 0xcd, 0xc2, 0x38, 0xea, 0x7f, 0x00, 0xc8, 0xaa, 0x7d, 0x1c, 0xf5, 0x3e,
	0x35, 0x18, 0xf8, 0x8b, 0x7e, 0x4d, 0xc9, 0x9a, 0xdd, 0x5f, 0xf4, 0x3e, 0x35, 0x18, 0xfe, 0x11,
	0xb5, 0xf4, 0x33, 0x7d, 0x6d, 0xde, 0x69, 0xb2, 0x6e, 0x1d, 0xab, 0x9f, 0x99, 0x62, 0x97, 0x00,
	0x51, 0x34, 0xc9, 0xd6, 0xed, 0xdf, 0x51, 0x6b, 0x61, 0x58, 0xf0, 0x5b, 0x54, 0xbb, 0xe5, 0xf7,
	0x60, 0x95, 0x4d, 0xaa, 0x97, 0xf8, 0x10, 0x2d, 0xdd, 0x31, 0x2f, 0xe6, 0x89, 0xe1, 0x15, 0x85,
	0x86, 0x00, 0xbf, 0x69, 0x88, 0x1a, 0xf6, 0xe8, 0xcd, 0x77, 0xd5, 0xfe, 0xd9, 0xe3, 0xbc, 0x53,
	0x7d, 0x9a, 0x77, 0xaa, 0xff, 0xce, 0x3b, 0xd5, 0x87, 0xe7, 0x4e, 0xe5, 0xe9, 0xb9, 0x53, 0xf9,
	0xfb, 0xb9, 0x53, 0xf9, 0x63, 0x77, 0xc1, 0xd1, 0x93, 0x68, 0xbd, 0x17, 0xaf, 0x05, 0xfc, 0x8c,
	0x46, 0xa3, 0x06, 0xf8, 0xf4, 0xe1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x20, 0x6e, 0x94,
	0xbe, 0x09, 0x00, 0x00,
}

func (m *APMEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APMEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APMEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataStream != nil {
		{
			size, err := m.DataStream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.URL != nil {
		{
			size, err := m.URL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.HTTP != nil {
		{
			size, err := m.HTTP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.UserAgent != nil {
		{
			size, err := m.UserAgent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApmEvent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApmEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApmEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Kubernetes != nil {
		{
			size, err := m.Kubernetes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Host != nil {
		{
			size, err := m.Host.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Container != nil {
		{
			size, err := m.Container.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Cloud != nil {
		{
			size, err := m.Cloud.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Parent != nil {
		{
			size, err := m.Parent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Metricset != nil {
		{
			size, err := m.Metricset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Trace != nil {
		{
			size, err := m.Trace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApmEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintApmEvent(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintApmEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovApmEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *APMEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovApmEvent(uint64(l))
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Metricset != nil {
		l = m.Metricset.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Cloud != nil {
		l = m.Cloud.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Container != nil {
		l = m.Container.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Host != nil {
		l = m.Host.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Kubernetes != nil {
		l = m.Kubernetes.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApmEvent(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApmEvent(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApmEvent(uint64(mapEntrySize))
		}
	}
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovApmEvent(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.UserAgent != nil {
		l = m.UserAgent.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.HTTP != nil {
		l = m.HTTP.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.URL != nil {
		l = m.URL.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	if m.DataStream != nil {
		l = m.DataStream.Size()
		n += 2 + l + sovApmEvent(uint64(l))
	}
	return n
}

func sovApmEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApmEvent(x uint64) (n int) {
	return sovApmEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *APMEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApmEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APMEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APMEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metricset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metricset == nil {
				m.Metricset = &Metricset{}
			}
			if err := m.Metricset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &Parent{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &Agent{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloud", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cloud == nil {
				m.Cloud = &Cloud{}
			}
			if err := m.Cloud.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = &Container{}
			}
			if err := m.Container.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Host == nil {
				m.Host = &Host{}
			}
			if err := m.Host.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubernetes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kubernetes == nil {
				m.Kubernetes = &Kubernetes{}
			}
			if err := m.Kubernetes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]*LabelValue)
			}
			var mapkey string
			var mapvalue *LabelValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApmEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApmEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApmEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApmEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApmEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApmEvent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApmEvent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LabelValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApmEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApmEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &Process{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &Service{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAgent == nil {
				m.UserAgent = &UserAgent{}
			}
			if err := m.UserAgent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HTTP == nil {
				m.HTTP = &HTTP{}
			}
			if err := m.HTTP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.URL == nil {
				m.URL = &URL{}
			}
			if err := m.URL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Child{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApmEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApmEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataStream == nil {
				m.DataStream = &DataStream{}
			}
			if err := m.DataStream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApmEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApmEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApmEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApmEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApmEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApmEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApmEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApmEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApmEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApmEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApmEvent = fmt.Errorf("proto: unexpected end of group")
)
