// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/transaction.proto

package modelpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Transaction struct {
	ID                  string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                string                       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name                string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Result              string                       `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Sampled             bool                         `protobuf:"varint,5,opt,name=sampled,proto3" json:"sampled"`
	RepresentativeCount float64                      `protobuf:"fixed64,6,opt,name=representative_count,json=representativeCount,proto3" json:"representative_count,omitempty"`
	SpanCount           *TransactionSpanCount        `protobuf:"bytes,7,opt,name=span_count,json=spanCount,proto3" json:"span_count,omitempty"`
	Custom              *types.Struct                `protobuf:"bytes,8,opt,name=custom,proto3" json:"custom,omitempty"`
	Experimental        *types.Value                 `protobuf:"bytes,9,opt,name=experimental,proto3" json:"experimental,omitempty"`
	Experience          *TransactionUserExperience   `protobuf:"bytes,10,opt,name=experience,proto3" json:"experience,omitempty"`
	Marks               map[string]*TransactionMarks `protobuf:"bytes,11,rep,name=marks,proto3" json:"marks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message             *Message                     `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	Root                bool                         `protobuf:"varint,13,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Transaction) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Transaction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Transaction) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Transaction) GetSampled() bool {
	if m != nil {
		return m.Sampled
	}
	return false
}

func (m *Transaction) GetRepresentativeCount() float64 {
	if m != nil {
		return m.RepresentativeCount
	}
	return 0
}

func (m *Transaction) GetSpanCount() *TransactionSpanCount {
	if m != nil {
		return m.SpanCount
	}
	return nil
}

func (m *Transaction) GetCustom() *types.Struct {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *Transaction) GetExperimental() *types.Value {
	if m != nil {
		return m.Experimental
	}
	return nil
}

func (m *Transaction) GetExperience() *TransactionUserExperience {
	if m != nil {
		return m.Experience
	}
	return nil
}

func (m *Transaction) GetMarks() map[string]*TransactionMarks {
	if m != nil {
		return m.Marks
	}
	return nil
}

func (m *Transaction) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Transaction) GetRoot() bool {
	if m != nil {
		return m.Root
	}
	return false
}

type TransactionSpanCount struct {
	Dropped int32 `protobuf:"varint,1,opt,name=dropped,proto3" json:"dropped,omitempty"`
	Started int32 `protobuf:"varint,2,opt,name=started,proto3" json:"started,omitempty"`
}

func (m *TransactionSpanCount) Reset()         { *m = TransactionSpanCount{} }
func (m *TransactionSpanCount) String() string { return proto.CompactTextString(m) }
func (*TransactionSpanCount) ProtoMessage()    {}
func (*TransactionSpanCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{1}
}
func (m *TransactionSpanCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionSpanCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionSpanCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionSpanCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionSpanCount.Merge(m, src)
}
func (m *TransactionSpanCount) XXX_Size() int {
	return m.Size()
}
func (m *TransactionSpanCount) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionSpanCount.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionSpanCount proto.InternalMessageInfo

func (m *TransactionSpanCount) GetDropped() int32 {
	if m != nil {
		return m.Dropped
	}
	return 0
}

func (m *TransactionSpanCount) GetStarted() int32 {
	if m != nil {
		return m.Started
	}
	return 0
}

type TransactionMarks struct {
	Marks []*TransactionMark `protobuf:"bytes,1,rep,name=marks,proto3" json:"marks,omitempty"`
}

func (m *TransactionMarks) Reset()         { *m = TransactionMarks{} }
func (m *TransactionMarks) String() string { return proto.CompactTextString(m) }
func (*TransactionMarks) ProtoMessage()    {}
func (*TransactionMarks) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{2}
}
func (m *TransactionMarks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionMarks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionMarks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionMarks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionMarks.Merge(m, src)
}
func (m *TransactionMarks) XXX_Size() int {
	return m.Size()
}
func (m *TransactionMarks) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionMarks.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionMarks proto.InternalMessageInfo

func (m *TransactionMarks) GetMarks() []*TransactionMark {
	if m != nil {
		return m.Marks
	}
	return nil
}

type TransactionMark struct {
	Key   string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TransactionMark) Reset()         { *m = TransactionMark{} }
func (m *TransactionMark) String() string { return proto.CompactTextString(m) }
func (*TransactionMark) ProtoMessage()    {}
func (*TransactionMark) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{3}
}
func (m *TransactionMark) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionMark) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionMark.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionMark) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionMark.Merge(m, src)
}
func (m *TransactionMark) XXX_Size() int {
	return m.Size()
}
func (m *TransactionMark) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionMark.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionMark proto.InternalMessageInfo

func (m *TransactionMark) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TransactionMark) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TransactionUserExperience struct {
	CumulativeLayoutShift float64 `protobuf:"fixed64,1,opt,name=CumulativeLayoutShift,proto3" json:"CumulativeLayoutShift,omitempty"`
	FirstInputDelay       float64 `protobuf:"fixed64,2,opt,name=FirstInputDelay,proto3" json:"FirstInputDelay,omitempty"`
	Longtask              float64 `protobuf:"fixed64,3,opt,name=Longtask,proto3" json:"Longtask,omitempty"`
	TotalBlockingTime     float64 `protobuf:"fixed64,4,opt,name=TotalBlockingTime,proto3" json:"TotalBlockingTime,omitempty"`
}

func (m *TransactionUserExperience) Reset()         { *m = TransactionUserExperience{} }
func (m *TransactionUserExperience) String() string { return proto.CompactTextString(m) }
func (*TransactionUserExperience) ProtoMessage()    {}
func (*TransactionUserExperience) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{4}
}
func (m *TransactionUserExperience) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionUserExperience) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionUserExperience.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionUserExperience) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionUserExperience.Merge(m, src)
}
func (m *TransactionUserExperience) XXX_Size() int {
	return m.Size()
}
func (m *TransactionUserExperience) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionUserExperience.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionUserExperience proto.InternalMessageInfo

func (m *TransactionUserExperience) GetCumulativeLayoutShift() float64 {
	if m != nil {
		return m.CumulativeLayoutShift
	}
	return 0
}

func (m *TransactionUserExperience) GetFirstInputDelay() float64 {
	if m != nil {
		return m.FirstInputDelay
	}
	return 0
}

func (m *TransactionUserExperience) GetLongtask() float64 {
	if m != nil {
		return m.Longtask
	}
	return 0
}

func (m *TransactionUserExperience) GetTotalBlockingTime() float64 {
	if m != nil {
		return m.TotalBlockingTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "elastic.apm.model.Transaction")
	proto.RegisterMapType((map[string]*TransactionMarks)(nil), "elastic.apm.model.Transaction.MarksEntry")
	proto.RegisterType((*TransactionSpanCount)(nil), "elastic.apm.model.TransactionSpanCount")
	proto.RegisterType((*TransactionMarks)(nil), "elastic.apm.model.TransactionMarks")
	proto.RegisterType((*TransactionMark)(nil), "elastic.apm.model.TransactionMark")
	proto.RegisterType((*TransactionUserExperience)(nil), "elastic.apm.model.TransactionUserExperience")
}

func init() {
	proto.RegisterFile("apm-server/model/proto/transaction.proto", fileDescriptor_648e4eb07362dca8)
}

var fileDescriptor_648e4eb07362dca8 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdf, 0x4e, 0xdb, 0x3e,
	0x14, 0xc6, 0x85, 0xb6, 0x70, 0xca, 0x4f, 0x80, 0x7f, 0x8c, 0x65, 0xd5, 0x54, 0xaa, 0x6e, 0xd3,
	0x32, 0x0d, 0x12, 0x8d, 0x71, 0x01, 0xdc, 0x4c, 0x2a, 0x7f, 0x24, 0xa6, 0x72, 0x63, 0xd8, 0x2e,
	0x26, 0x4d, 0x93, 0x9b, 0x9a, 0x10, 0x35, 0x89, 0x23, 0xdb, 0x41, 0xeb, 0x5b, 0xec, 0x41, 0xf6,
	0x1a, 0x93, 0x76, 0xc9, 0xe5, 0xae, 0xd0, 0x54, 0xee, 0xf6, 0x14, 0x93, 0x9d, 0x04, 0x0a, 0x2d,
	0xec, 0x26, 0x3a, 0xe7, 0x7c, 0xdf, 0x77, 0x7c, 0xfc, 0xd9, 0x0e, 0xd8, 0x34, 0x89, 0xd6, 0x25,
	0x13, 0xe7, 0x4c, 0xb8, 0x11, 0xef, 0xb1, 0xd0, 0x4d, 0x04, 0x57, 0xdc, 0x55, 0x82, 0xc6, 0x92,
	0x7a, 0x2a, 0xe0, 0xb1, 0x63, 0x2a, 0x78, 0x89, 0x85, 0x54, 0xaa, 0xc0, 0x73, 0x68, 0x12, 0x39,
	0x86, 0x5a, 0x7f, 0x7e, 0x8f, 0x38, 0x62, 0x52, 0x52, 0x9f, 0x65, 0xc2, 0xfa, 0x53, 0x9f, 0x73,
	0x3f, 0x64, 0x19, 0xd6, 0x4d, 0x4f, 0x5d, 0xa9, 0x44, 0xea, 0xa9, 0x1c, 0x5d, 0xf7, 0x03, 0x75,
	0x96, 0x76, 0x1d, 0x8f, 0x47, 0xae, 0xcf, 0x7d, 0x7e, 0x43, 0xd3, 0x59, 0xd6, 0x4f, 0x47, 0x19,
	0xbd, 0xf5, 0xbd, 0x0c, 0xb5, 0x93, 0x9b, 0xd9, 0xf0, 0x0a, 0x94, 0x82, 0x9e, 0x85, 0x9a, 0xc8,
	0x9e, 0x6b, 0x57, 0x86, 0x97, 0xab, 0xa5, 0xc3, 0x3d, 0x52, 0x0a, 0x7a, 0x18, 0xc3, 0x8c, 0x1a,
	0x24, 0xcc, 0x2a, 0x69, 0x84, 0x98, 0x58, 0xd7, 0x62, 0x1a, 0x31, 0x6b, 0x3a, 0xab, 0xe9, 0x18,
	0xaf, 0x40, 0x45, 0x30, 0x99, 0x86, 0xca, 0x9a, 0x31, 0xd5, 0x3c, 0xc3, 0x2f, 0xa0, 0x2a, 0x69,
	0x94, 0x84, 0xac, 0x67, 0x95, 0x9b, 0xc8, 0x9e, 0x6d, 0xd7, 0xfe, 0x5c, 0xae, 0x16, 0x25, 0x52,
	0x04, 0xf8, 0x0d, 0x2c, 0x0b, 0x96, 0x08, 0x26, 0x59, 0xac, 0xa8, 0x0a, 0xce, 0xd9, 0x17, 0x8f,
	0xa7, 0xb1, 0xb2, 0x2a, 0x4d, 0x64, 0x23, 0xf2, 0xff, 0x6d, 0x6c, 0x57, 0x43, 0xf8, 0x00, 0x40,
	0x26, 0x34, 0xce, 0x89, 0xd5, 0x26, 0xb2, 0x6b, 0x1b, 0x2f, 0x9d, 0x31, 0x73, 0x9d, 0x91, 0x5d,
	0x1e, 0x27, 0x34, 0x36, 0x62, 0x32, 0x27, 0x8b, 0x10, 0xbb, 0x50, 0xf1, 0x52, 0xa9, 0x78, 0x64,
	0xcd, 0x9a, 0x1e, 0x8f, 0x9d, 0xcc, 0x67, 0xa7, 0x30, 0xd0, 0x39, 0x36, 0x3e, 0x93, 0x9c, 0x86,
	0x77, 0x60, 0x9e, 0x7d, 0x4d, 0x98, 0x08, 0x22, 0x3d, 0x50, 0x68, 0xcd, 0x19, 0xd9, 0xca, 0x98,
	0xec, 0x23, 0x0d, 0x53, 0x46, 0x6e, 0x71, 0x71, 0x07, 0x20, 0xcb, 0x59, 0xec, 0x31, 0x0b, 0x8c,
	0x72, 0xed, 0xe1, 0xa1, 0x3f, 0x48, 0x26, 0xf6, 0xaf, 0x35, 0x64, 0x44, 0x8f, 0xdf, 0x41, 0x39,
	0xa2, 0xa2, 0x2f, 0xad, 0x5a, 0x73, 0xda, 0xae, 0x6d, 0xbc, 0x7a, 0xb8, 0x91, 0x73, 0xa4, 0xb9,
	0xfb, 0xb1, 0x12, 0x03, 0x92, 0xe9, 0xf0, 0x26, 0x54, 0xf3, 0x3b, 0x66, 0xcd, 0x9b, 0x59, 0xea,
	0x13, 0x5a, 0x1c, 0x65, 0x0c, 0x52, 0x50, 0xf5, 0xf9, 0x0b, 0xce, 0x95, 0xf5, 0x9f, 0x3e, 0x50,
	0x62, 0xe2, 0xfa, 0x67, 0x80, 0x9b, 0xf6, 0x78, 0x11, 0xa6, 0xfb, 0x6c, 0x90, 0x5d, 0x27, 0xa2,
	0x43, 0xbc, 0x0d, 0xe5, 0x73, 0xed, 0x87, 0xb9, 0x48, 0xb5, 0x8d, 0x67, 0x0f, 0x8f, 0x6a, 0x5a,
	0x91, 0x4c, 0xb1, 0x53, 0xda, 0x42, 0xad, 0xf7, 0xb0, 0x3c, 0xe9, 0x1c, 0xb1, 0x05, 0xd5, 0x9e,
	0xe0, 0x49, 0xc2, 0xb2, 0xbb, 0x5b, 0x26, 0x45, 0xaa, 0x11, 0xa9, 0xa8, 0x50, 0xac, 0x67, 0x96,
	0x2c, 0x93, 0x22, 0x6d, 0x75, 0x60, 0xf1, 0xee, 0x52, 0x78, 0xab, 0x70, 0x12, 0x19, 0x27, 0x5b,
	0xff, 0x1e, 0x2f, 0xb7, 0xb0, 0xb5, 0x0d, 0x0b, 0x77, 0x90, 0x09, 0xbb, 0x5f, 0x1e, 0xdd, 0x3d,
	0xca, 0x37, 0xd6, 0xfa, 0x81, 0xe0, 0xc9, 0xbd, 0x07, 0x8d, 0x37, 0xe1, 0xd1, 0x6e, 0x1a, 0xa5,
	0xa1, 0xb9, 0xf2, 0x1d, 0x3a, 0xe0, 0xa9, 0x3a, 0x3e, 0x0b, 0x4e, 0x95, 0xe9, 0x8b, 0xc8, 0x64,
	0x10, 0xdb, 0xb0, 0x70, 0x10, 0x08, 0xa9, 0x0e, 0xe3, 0x24, 0x55, 0x7b, 0x2c, 0xa4, 0x83, 0x7c,
	0xcd, 0xbb, 0x65, 0x5c, 0x87, 0xd9, 0x0e, 0x8f, 0x7d, 0x45, 0x65, 0xdf, 0xbc, 0x64, 0x44, 0xae,
	0x73, 0xbc, 0x06, 0x4b, 0x27, 0x5c, 0xd1, 0xb0, 0x1d, 0x72, 0xaf, 0x1f, 0xc4, 0xfe, 0x49, 0x10,
	0x31, 0xf3, 0xb0, 0x11, 0x19, 0x07, 0xda, 0xfb, 0x3f, 0x87, 0x0d, 0x74, 0x31, 0x6c, 0xa0, 0xdf,
	0xc3, 0x06, 0xfa, 0x76, 0xd5, 0x98, 0xba, 0xb8, 0x6a, 0x4c, 0xfd, 0xba, 0x6a, 0x4c, 0x7d, 0x7a,
	0x3d, 0xf2, 0x53, 0xca, 0x1d, 0x75, 0xc7, 0xfe, 0x75, 0xe6, 0x9b, 0x74, 0xbb, 0x15, 0xf3, 0x72,
	0xde, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x34, 0x73, 0x7a, 0xfe, 0x4b, 0x05, 0x00, 0x00,
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Root {
		i--
		if m.Root {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Marks) > 0 {
		for k := range m.Marks {
			v := m.Marks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTransaction(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTransaction(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTransaction(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Experience != nil {
		{
			size, err := m.Experience.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Experimental != nil {
		{
			size, err := m.Experimental.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.SpanCount != nil {
		{
			size, err := m.SpanCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RepresentativeCount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RepresentativeCount))))
		i--
		dAtA[i] = 0x31
	}
	if m.Sampled {
		i--
		if m.Sampled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionSpanCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionSpanCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionSpanCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Started != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Started))
		i--
		dAtA[i] = 0x10
	}
	if m.Dropped != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Dropped))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionMarks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionMarks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionMarks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Marks) > 0 {
		for iNdEx := len(m.Marks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Marks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionMark) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionMark) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionUserExperience) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionUserExperience) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionUserExperience) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalBlockingTime != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalBlockingTime))))
		i--
		dAtA[i] = 0x21
	}
	if m.Longtask != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longtask))))
		i--
		dAtA[i] = 0x19
	}
	if m.FirstInputDelay != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FirstInputDelay))))
		i--
		dAtA[i] = 0x11
	}
	if m.CumulativeLayoutShift != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CumulativeLayoutShift))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Sampled {
		n += 2
	}
	if m.RepresentativeCount != 0 {
		n += 9
	}
	if m.SpanCount != nil {
		l = m.SpanCount.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Experimental != nil {
		l = m.Experimental.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Experience != nil {
		l = m.Experience.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Marks) > 0 {
		for k, v := range m.Marks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTransaction(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTransaction(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTransaction(uint64(mapEntrySize))
		}
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Root {
		n += 2
	}
	return n
}

func (m *TransactionSpanCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dropped != 0 {
		n += 1 + sovTransaction(uint64(m.Dropped))
	}
	if m.Started != 0 {
		n += 1 + sovTransaction(uint64(m.Started))
	}
	return n
}

func (m *TransactionMarks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Marks) > 0 {
		for _, e := range m.Marks {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *TransactionMark) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *TransactionUserExperience) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CumulativeLayoutShift != 0 {
		n += 9
	}
	if m.FirstInputDelay != 0 {
		n += 9
	}
	if m.Longtask != 0 {
		n += 9
	}
	if m.TotalBlockingTime != 0 {
		n += 9
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sampled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sampled = bool(v != 0)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepresentativeCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RepresentativeCount = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanCount == nil {
				m.SpanCount = &TransactionSpanCount{}
			}
			if err := m.SpanCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Custom == nil {
				m.Custom = &types.Struct{}
			}
			if err := m.Custom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experimental", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Experimental == nil {
				m.Experimental = &types.Value{}
			}
			if err := m.Experimental.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Experience == nil {
				m.Experience = &TransactionUserExperience{}
			}
			if err := m.Experience.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marks == nil {
				m.Marks = make(map[string]*TransactionMarks)
			}
			var mapkey string
			var mapvalue *TransactionMarks
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransaction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTransaction
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTransaction
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTransaction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTransaction
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTransaction
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TransactionMarks{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTransaction(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTransaction
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Marks[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Root = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionSpanCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionSpanCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionSpanCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dropped", wireType)
			}
			m.Dropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dropped |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			m.Started = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Started |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionMarks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionMarks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionMarks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Marks = append(m.Marks, &TransactionMark{})
			if err := m.Marks[len(m.Marks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionUserExperience) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionUserExperience: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionUserExperience: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeLayoutShift", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CumulativeLayoutShift = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstInputDelay", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FirstInputDelay = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longtask", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longtask = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBlockingTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalBlockingTime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransaction = fmt.Errorf("proto: unexpected end of group")
)
