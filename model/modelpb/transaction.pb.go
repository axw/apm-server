// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apm-server/model/proto/transaction.proto

package modelpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Transaction foo bar
type Transaction struct {
	Metadata            *Metadata           `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Type                string              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name                string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Result              string              `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Outcome             string              `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	ID                  string              `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	TraceID             string              `protobuf:"bytes,7,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	ParentID            string              `protobuf:"bytes,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Timestamp           *time.Time          `protobuf:"bytes,9,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	Duration            *time.Time          `protobuf:"bytes,10,opt,name=duration,proto3,stdtime" json:"duration,omitempty"`
	Sampled             bool                `protobuf:"varint,11,opt,name=sampled,proto3" json:"sampled,omitempty"`
	RepresentativeCount float64             `protobuf:"fixed64,12,opt,name=representative_count,json=representativeCount,proto3" json:"representative_count,omitempty"`
	Context             *TransactionContext `protobuf:"bytes,13,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Transaction) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Transaction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Transaction) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Transaction) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *Transaction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Transaction) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *Transaction) GetParentID() string {
	if m != nil {
		return m.ParentID
	}
	return ""
}

func (m *Transaction) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Transaction) GetDuration() *time.Time {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Transaction) GetSampled() bool {
	if m != nil {
		return m.Sampled
	}
	return false
}

func (m *Transaction) GetRepresentativeCount() float64 {
	if m != nil {
		return m.RepresentativeCount
	}
	return 0
}

func (m *Transaction) GetContext() *TransactionContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type TransactionContext struct {
	Custom       []*KeyValue `protobuf:"bytes,1,rep,name=custom,proto3" json:"custom,omitempty"`
	Experimental *AnyValue   `protobuf:"bytes,2,opt,name=experimental,proto3" json:"experimental,omitempty"`
}

func (m *TransactionContext) Reset()         { *m = TransactionContext{} }
func (m *TransactionContext) String() string { return proto.CompactTextString(m) }
func (*TransactionContext) ProtoMessage()    {}
func (*TransactionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_648e4eb07362dca8, []int{1}
}
func (m *TransactionContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionContext.Merge(m, src)
}
func (m *TransactionContext) XXX_Size() int {
	return m.Size()
}
func (m *TransactionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionContext.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionContext proto.InternalMessageInfo

func (m *TransactionContext) GetCustom() []*KeyValue {
	if m != nil {
		return m.Custom
	}
	return nil
}

func (m *TransactionContext) GetExperimental() *AnyValue {
	if m != nil {
		return m.Experimental
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "elastic.apm.model.Transaction")
	proto.RegisterType((*TransactionContext)(nil), "elastic.apm.model.TransactionContext")
}

func init() {
	proto.RegisterFile("apm-server/model/proto/transaction.proto", fileDescriptor_648e4eb07362dca8)
}

var fileDescriptor_648e4eb07362dca8 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xae, 0xb4, 0xa9, 0x5b, 0x0e, 0x18, 0x34, 0x99, 0x22, 0xa5, 0xd5, 0xd0, 0x50,
	0x11, 0x5a, 0x22, 0xd8, 0x81, 0x03, 0x12, 0x13, 0x5d, 0x39, 0x54, 0x08, 0x09, 0x45, 0x15, 0x07,
	0x2e, 0x93, 0x9b, 0x3c, 0x42, 0xa4, 0x38, 0x8e, 0x1c, 0x67, 0xda, 0xbe, 0x02, 0xa7, 0x9d, 0xf8,
	0x4c, 0x1c, 0x77, 0xe4, 0x54, 0x50, 0xfa, 0x45, 0x90, 0x9d, 0xa4, 0xdd, 0xd6, 0xf5, 0x52, 0xf9,
	0xfd, 0xff, 0xbf, 0x7f, 0xfb, 0xfc, 0x9e, 0x8b, 0xc7, 0x2c, 0xe5, 0x47, 0x19, 0xc8, 0x73, 0x90,
	0x2e, 0x17, 0x01, 0xc4, 0x6e, 0x2a, 0x85, 0x12, 0xae, 0x92, 0x2c, 0xc9, 0x98, 0xaf, 0x22, 0x91,
	0x38, 0x46, 0x21, 0x8f, 0x20, 0x66, 0x99, 0x8a, 0x7c, 0x87, 0xa5, 0xdc, 0x31, 0xe8, 0xe0, 0xf9,
	0x8e, 0xb0, 0x2f, 0x38, 0xaf, 0x73, 0x83, 0xc3, 0x1d, 0x10, 0x07, 0xc5, 0x02, 0xa6, 0x58, 0x85,
	0x0d, 0x43, 0x21, 0xc2, 0x18, 0x4a, 0x73, 0x91, 0x7f, 0x77, 0x55, 0xc4, 0x21, 0x53, 0x8c, 0xa7,
	0x15, 0x60, 0xdf, 0x05, 0x82, 0x5c, 0xb2, 0x4d, 0x7f, 0x83, 0xa3, 0x30, 0x52, 0x3f, 0xf2, 0x85,
	0xe3, 0x0b, 0xee, 0x86, 0x22, 0x14, 0x1b, 0x50, 0x57, 0xe5, 0x6f, 0xea, 0x53, 0x89, 0x1f, 0xfc,
	0x6a, 0xe1, 0xde, 0x7c, 0x73, 0x49, 0xf2, 0x16, 0x5b, 0x75, 0x47, 0x14, 0x8d, 0xd0, 0xb8, 0xf7,
	0xe6, 0x99, 0xb3, 0x75, 0x63, 0xe7, 0x73, 0x85, 0x78, 0x6b, 0x98, 0x10, 0xdc, 0x52, 0x97, 0x29,
	0xd0, 0xe6, 0x08, 0x8d, 0xbb, 0x9e, 0x39, 0x6b, 0x2d, 0x61, 0x1c, 0xe8, 0x5e, 0xa9, 0xe9, 0x33,
	0xd9, 0xc7, 0x6d, 0x09, 0x59, 0x1e, 0x2b, 0xda, 0x32, 0x6a, 0x55, 0x11, 0x8a, 0x3b, 0x22, 0x57,
	0xbe, 0xe0, 0x40, 0x1f, 0x18, 0xa3, 0x2e, 0xc9, 0x3e, 0x6e, 0x46, 0x01, 0x6d, 0x6b, 0x71, 0xd2,
	0x2e, 0x96, 0xc3, 0xe6, 0x6c, 0xea, 0x35, 0xa3, 0x80, 0xbc, 0xc0, 0x96, 0x92, 0xcc, 0x87, 0xb3,
	0x28, 0xa0, 0x1d, 0xe3, 0xf6, 0x8a, 0xe5, 0xb0, 0x33, 0xd7, 0xda, 0x6c, 0xea, 0x75, 0x8c, 0x39,
	0x0b, 0xc8, 0x4b, 0xdc, 0x4d, 0x99, 0x84, 0x44, 0x69, 0xd0, 0x32, 0x60, 0xbf, 0x58, 0x0e, 0xad,
	0x2f, 0x46, 0x9c, 0x4d, 0x3d, 0xab, 0xb4, 0x67, 0x01, 0x79, 0x8f, 0xbb, 0xeb, 0x79, 0xd3, 0xae,
	0xb9, 0xfe, 0xc0, 0x29, 0x07, 0xee, 0xd4, 0x73, 0x74, 0xe6, 0x35, 0x31, 0x69, 0x5d, 0xfd, 0x1d,
	0x22, 0x6f, 0x13, 0x21, 0xef, 0xb0, 0x55, 0xaf, 0x83, 0x62, 0x13, 0x7f, 0xba, 0x15, 0x9f, 0x56,
	0x40, 0x95, 0x5e, 0x07, 0xf4, 0x04, 0x32, 0xc6, 0xd3, 0x18, 0x02, 0xda, 0x1b, 0xa1, 0xb1, 0xe5,
	0xd5, 0x25, 0x79, 0x8d, 0x9f, 0x48, 0x48, 0x25, 0x64, 0x90, 0x28, 0xa6, 0xa2, 0x73, 0x38, 0xf3,
	0x45, 0x9e, 0x28, 0xda, 0x1f, 0xa1, 0x31, 0xf2, 0x1e, 0xdf, 0xf6, 0x4e, 0xb5, 0x45, 0x4e, 0x70,
	0xc7, 0x17, 0x89, 0x82, 0x0b, 0x45, 0x1f, 0x9a, 0x46, 0x0e, 0xef, 0x59, 0xe3, 0x8d, 0xc5, 0x9f,
	0x96, 0xb0, 0x57, 0xa7, 0x0e, 0x7e, 0x22, 0x4c, 0xb6, 0x7d, 0x72, 0x8c, 0xdb, 0x7e, 0x9e, 0x29,
	0xc1, 0x29, 0x1a, 0xed, 0xed, 0x78, 0x1d, 0x9f, 0xe0, 0xf2, 0x2b, 0x8b, 0x73, 0xf0, 0x2a, 0x94,
	0x9c, 0xe0, 0x3e, 0x5c, 0xa4, 0x20, 0x23, 0xae, 0x9b, 0x8c, 0xcd, 0x1b, 0xb9, 0x3f, 0xfa, 0x21,
	0xa9, 0xa2, 0xb7, 0x02, 0x93, 0x8f, 0xbf, 0x0b, 0x1b, 0x5d, 0x17, 0x36, 0xfa, 0x57, 0xd8, 0xe8,
	0x6a, 0x65, 0x37, 0xae, 0x57, 0x76, 0xe3, 0xcf, 0xca, 0x6e, 0x7c, 0x7b, 0x75, 0xe3, 0xb9, 0x57,
	0x5f, 0xe7, 0x6e, 0xfd, 0xd3, 0xcc, 0x67, 0xba, 0x58, 0xb4, 0xcd, 0x12, 0x8e, 0xff, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0x42, 0x62, 0x32, 0xee, 0x03, 0x00, 0x00,
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		{
			size, err := m.Context.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.RepresentativeCount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RepresentativeCount))))
		i--
		dAtA[i] = 0x61
	}
	if m.Sampled {
		i--
		if m.Sampled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Duration != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Duration):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTransaction(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x52
	}
	if m.Timestamp != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTransaction(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ParentID) > 0 {
		i -= len(m.ParentID)
		copy(dAtA[i:], m.ParentID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ParentID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Outcome) > 0 {
		i -= len(m.Outcome)
		copy(dAtA[i:], m.Outcome)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Outcome)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Experimental != nil {
		{
			size, err := m.Experimental.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Custom) > 0 {
		for iNdEx := len(m.Custom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Custom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Duration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Duration)
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Sampled {
		n += 2
	}
	if m.RepresentativeCount != 0 {
		n += 9
	}
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *TransactionContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Custom) > 0 {
		for _, e := range m.Custom {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.Experimental != nil {
		l = m.Experimental.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sampled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sampled = bool(v != 0)
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepresentativeCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RepresentativeCount = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &TransactionContext{}
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Custom = append(m.Custom, &KeyValue{})
			if err := m.Custom[len(m.Custom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experimental", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Experimental == nil {
				m.Experimental = &AnyValue{}
			}
			if err := m.Experimental.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransaction = fmt.Errorf("proto: unexpected end of group")
)
